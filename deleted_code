# # old get llab registration data
# @csrf_exempt
# def get_lab_registration_data_old(request, type_param, values_param):
#     data = []
#     if type_param == 'all':
#         print('inside lab registration get data')
#         sql_query = '''
#             SELECT lr.id, lr.patient_name, li.id AS LAB_Item, t.id AS test_id, t.test_name, datetime, lr.gender, lr.pannel_case, li.labitem_status FROM managementApp_labregistration lr, managementApp_labitems li, managementApp_test t WHERE lr.id = li.lab_id AND li.test_id = t.id;
#         '''
#         # Execute the raw query using the manager for the model
#         lab_registrations = LabRegistration.objects.raw(sql_query)

#         # Create a list to store the data for each LabRegistration object

#         for lab_registration in lab_registrations:
#             lab_id = lab_registration.id
#             patient_name = lab_registration.patient_name
#             labitem_id = lab_registration.LAB_Item
#             test_id = lab_registration.test_id
#             test_name = lab_registration.test_name
#             datetime = lab_registration.datetime.strftime(
#                 "%Y-%m-%d %H:%M")  # Format datetime as string
#             gender = lab_registration.gender
#             pannel_case = lab_registration.pannel_case
#             labitem_status = lab_registration.labitem_status

#             print(f"Test ID: {test_id}")

#             # Add the data for the current LabRegistration object to the list
#             data.append({
#                 'lab_id': lab_id,
#                 'patient_name': patient_name,
#                 'labitem_id': labitem_id,
#                 'test_id': test_id,
#                 'test_name': test_name,
#                 'datetime': datetime,
#                 'gender': gender,
#                 'pannel_case': pannel_case,
#                 'labitem_status': labitem_status
#             })

#     # Return the data as a JSON response
#     return JsonResponse(data, safe=False)
